<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hook</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var mousePointDir = point_direction(x,y,mouse_x,mouse_y);
var mouseHitLength = 300;
_hittingObj = collision_line_first(x,y,mouse_x + lengthdir_x(mouseHitLength, mousePointDir),mouse_y + lengthdir_y(mouseHitLength, mousePointDir),obj_solid,0,false);
_hookSpd = 32;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (_hittingObj)
{
    if (distance_to_point(_hittingObj.x + 4, _hittingObj.y + 4) &gt;= _hookSpd)
        move_towards_point(_hittingObj.x + 4, _hittingObj.y + 4, _hookSpd);
    else
    {
        x = _hittingObj.x + 4;
        y = _hittingObj.y + 4;
        speed = 0;
        
        if (obj_main._state != obj_main.PlayerState.hooking)
        {           
            obj_main._state = obj_main.PlayerState.hooking;
        
            var leftOpen, rightOpen, upOpen, downOpen;
        
            //Check up top
            if (collision_point(_hittingObj.x + 4,_hittingObj.y + 4 - 8,obj_solid,false,true))
                upOpen = false;
            else
                upOpen = true;
            
            //Check below
            if (collision_point(_hittingObj.x + 4,_hittingObj.y + 4 + 8,obj_solid,false,true))
               downOpen = false;
            else
                downOpen = true;
            
            //Check left
            if (collision_point(_hittingObj.x + 4 - 8,_hittingObj.y + 4,obj_solid,false,true))
                leftOpen = false;
            else
                leftOpen = true;
            
            //Check right
            if (collision_point(_hittingObj.x + 4 + 8,_hittingObj.y + 4,obj_solid,false,true))
                rightOpen = false;
            else
                rightOpen = true;
        
            if (obj_main.x &lt; _hittingObj.x) &amp;&amp; (leftOpen)
            {
                obj_main._hookX = _hittingObj.x - 16;
                obj_main._hookY = _hittingObj.y + 12;
                obj_main._hookSide = "r";
            }
            else if (obj_main.x &gt; _hittingObj.x) &amp;&amp; (rightOpen)
            {
                obj_main._hookX = _hittingObj.x + 16 + 8;
                obj_main._hookY = _hittingObj.y + 12;
                obj_main._hookSide = "l";
            }
            else if (obj_main.y &lt; _hittingObj.y) &amp;&amp; (upOpen)
            {
                obj_main._hookX = _hittingObj.x + 4;
                obj_main._hookY = _hittingObj.y - 1;
                obj_main._hookSide = "d";
            }
            else if (obj_main.y &gt; _hittingObj.y) &amp;&amp; (downOpen)
            {
                obj_main._hookX = _hittingObj.x + 4;
                obj_main._hookY = _hittingObj.y + 8 + 24;
                obj_main._hookSide = "u";
            }
            
            //Corner cases
            //Bottom left
            if ((obj_main.x &gt; _hittingObj.x) &amp;&amp; (rightOpen) &amp;&amp; (collision_point(_hittingObj.x + 4 + 8,_hittingObj.y + 4 + 8,obj_solid,false,true)))
            {
                obj_main._hookX = _hittingObj.x + 16 + 8;
                obj_main._hookY = _hittingObj.y + 4;
                obj_main._hookSide = "l";
            }
            if ((obj_main.y &lt; _hittingObj.y) &amp;&amp; (upOpen) &amp;&amp; (collision_point(_hittingObj.x + 4 - 8,_hittingObj.y + 4 - 8,obj_solid,false,true)))
            {
                obj_main._hookX = _hittingObj.x + 4 + 8;
                obj_main._hookY = _hittingObj.y - 1;
                obj_main._hookSide = "d";
            }
            
            //Bottom right
            if ((obj_main.x &lt; _hittingObj.x) &amp;&amp; (leftOpen) &amp;&amp; (collision_point(_hittingObj.x + 4 - 8,_hittingObj.y + 4 + 8,obj_solid,false,true)))
            {
                obj_main._hookX = _hittingObj.x - 16;
                obj_main._hookY = _hittingObj.y + 4;
                obj_main._hookSide = "r";
            }
            if ((obj_main.y &lt; _hittingObj.y) &amp;&amp; (upOpen) &amp;&amp; (collision_point(_hittingObj.x + 4 + 8,_hittingObj.y + 4 - 8,obj_solid,false,true)))
            {
                obj_main._hookX = _hittingObj.x + 4 - 8;
                obj_main._hookY = _hittingObj.y - 1;
                obj_main._hookSide = "d";
            }
            
            //Top right
            if ((obj_main.x &lt; _hittingObj.x) &amp;&amp; (leftOpen) &amp;&amp; (collision_point(_hittingObj.x + 4 - 8,_hittingObj.y + 4 - 16,obj_solid,false,true)))
            {
                obj_main._hookX = _hittingObj.x - 16;
                obj_main._hookY = _hittingObj.y + 12 + 8;
                obj_main._hookSide = "r";
            }
            else if ((obj_main.x &lt; _hittingObj.x) &amp;&amp; (leftOpen) &amp;&amp; (collision_point(_hittingObj.x + 4 - 8,_hittingObj.y + 4 - 8,obj_solid,false,true)))
            {
                obj_main._hookX = _hittingObj.x - 16;
                obj_main._hookY = _hittingObj.y + 12 + 16;
                obj_main._hookSide = "r";
            }
            if ((obj_main.y &gt; _hittingObj.y) &amp;&amp; (downOpen) &amp;&amp; (collision_point(_hittingObj.x + 4 + 8,_hittingObj.y + 4 + 8,obj_solid,false,true)))
            {
                obj_main._hookX = _hittingObj.x + 4 - 8;
                obj_main._hookY = _hittingObj.y + 8 + 24;
                obj_main._hookSide = "u";
            }
            
            //Top left
            if ((obj_main.x &gt; _hittingObj.x) &amp;&amp; (rightOpen) &amp;&amp; (collision_point(_hittingObj.x + 4 + 8,_hittingObj.y + 4 - 16,obj_solid,false,true)))
            {
                obj_main._hookX = _hittingObj.x + 16 + 8;
                obj_main._hookY = _hittingObj.y + 12 + 8;
                obj_main._hookSide = "l";
            }
            else if ((obj_main.x &gt; _hittingObj.x) &amp;&amp; (rightOpen) &amp;&amp; (collision_point(_hittingObj.x + 4 + 8,_hittingObj.y + 4 - 8,obj_solid,false,true)))
            {
                obj_main._hookX = _hittingObj.x + 16 + 8;
                obj_main._hookY = _hittingObj.y + 12 + 16;
                obj_main._hookSide = "l";
            }
            if ((obj_main.y &gt; _hittingObj.y) &amp;&amp; (downOpen) &amp;&amp; (collision_point(_hittingObj.x + 4 - 8,_hittingObj.y + 4 + 8,obj_solid,false,true)))
            {
                obj_main._hookX = _hittingObj.x + 8;
                obj_main._hookY = _hittingObj.y + 8 + 24;
                obj_main._hookSide = "u";
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_black);
draw_line(x,y,obj_main.x,obj_main.y-8);
draw_self();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
