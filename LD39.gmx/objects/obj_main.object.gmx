<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_main_Idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Init vars
_grav=1;
_spd=6;
_jSpd=12;
_hSpd=0;
_vSpd=0;

_isGrappling = false;
_inAir = false;
_canBeControlled = true;

_state = PlayerState.idle;

enum PlayerState
{
    idle,
    running,
    jumping,
    falling,
    hookthrowing,
    hooking,
    pulling,
    fixing
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Platform Physics

var lkey=keyboard_check(vk_left) &amp;&amp; (_canBeControlled);
var rkey=keyboard_check(vk_right) &amp;&amp; (_canBeControlled);
var jkey=keyboard_check_pressed(vk_up) || keyboard_check_pressed(ord("Z")) &amp;&amp; (_canBeControlled);
var jkey_held=keyboard_check(vk_up) || keyboard_check(ord("Z")) &amp;&amp; (_canBeControlled);

//if (dead==0)
{

    // Check for ground
    if (place_meeting(x,y+1,obj_solid)) 
    {
        _vSpd = 0;
    
        if (jkey)
        {
            _vSpd = -_jSpd;
            
            //if (obj_camera.world==1)
                //audio_play_sound(snd_jump,10,0);
        }
    } 
    else 
    {
        // Gravity
        if (_vSpd &lt; 10)
        {
            _vSpd += _grav;
        }
        
        if (_vSpd&lt;0) &amp;&amp; (!jkey_held)
        {
            _vSpd = max(_vSpd,_vSpd + 2);
        }
    }

    // Moving right
    if (rkey)
    {
        if (_hSpd&lt;_spd)
            _hSpd += 1;
        else
            _hSpd=_spd;
            
        _state = PlayerState.running;
            
        if place_meeting(x,y+1,obj_solid)
            _state = PlayerState.running;
    }

    // Moving left
    if (lkey)
    {
        if (_state != PlayerState.hooking)
        {
             if (_hSpd&gt;-_spd)
               _hSpd -= 1;
            else
                _hSpd = -_spd;
        }
        
        if place_meeting(x,y+1,obj_solid)
            _state = PlayerState.running;
    }

    // Check for not moving
    if ((!rkey &amp;&amp; !lkey) || (rkey &amp;&amp; lkey))
    {
        if (_hSpd &gt; 0)
            _hSpd -= 1;
        else if (_hSpd &lt; 0)
            _hSpd += 1;
        else _hSpd = 0;
        
        if place_meeting(x,y+1,obj_solid)
            _state = PlayerState.idle;
    }

    // Horizontal collisions
    if (place_meeting(x + _hSpd,y,obj_solid)) 
    {
        while (!place_meeting(x + sign(_hSpd),y,obj_solid)) 
        {
            x += sign(_hSpd);
        }
        _hSpd=0;
    }
    

    // Move horizontally
    //if (move==0)
    //    _hSpd=0;
        
    x += _hSpd;
    
    if (_hSpd!=0)
        image_xscale = -sign(_hSpd);

    // Vertical collisions
    if (place_meeting(x,y + _vSpd,obj_solid)) 
    {
        while (!place_meeting(x,y + sign(_vSpd),obj_solid)) 
        {
            y += sign(_vSpd);
        }
        _vSpd = 0;
    }

    // Move vertically
    //if (dead==1)
        //_vSpd=0;
        
    if (_vSpd &gt; 0)
        _state = PlayerState.falling;
    else if (_vSpd &lt; 0)
        _state = PlayerState.jumping;
        
    y += _vSpd;

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hook
var hook = mouse_check_button_pressed(mb_left) &amp;&amp; _canBeControlled;

//
{
    if (_state != PlayerState.hooking || _state != PlayerState.pulling)
    {
        instance_create(x,y,obj_hook);
        _state = PlayerState.hookthrowing;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
