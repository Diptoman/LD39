<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_main_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Init vars
_grav=1;
_spd=6;
_jSpd=10;
_hSpd=0;
_vSpd=0;
_hookedMvSpd = 48;

_isGrappling = false;
_inAir = false;
_canBeControlled = true;

_state = PlayerState.idle;

enum PlayerState
{
    idle,
    running,
    jumping,
    falling,
    hookthrowing,
    hooking,
    stuck,
    pulling,
    fixing
}

_hookX = 0;
_hookY = 0;

_hookSide = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hook
var hook = mouse_check_button_pressed(mb_left) &amp;&amp; _canBeControlled;

//
{
    if ((_state != PlayerState.hooking || _state != PlayerState.pulling) &amp;&amp; (hook))
    {
        if (instance_exists(obj_hook))
        {
            with (obj_hook) instance_destroy();
            if (_state == PlayerState.stuck)
            {
                _state = PlayerState.falling;
            }
        }
        instance_create(x,y,obj_hook);
    }
    
    if (_state == PlayerState.hooking) &amp;&amp; (_state != PlayerState.stuck)
    {
        if (distance_to_point(_hookX, _hookY) &gt;= _hookedMvSpd)
            move_towards_point(_hookX, _hookY, _hookedMvSpd);
        else
        {
            x = _hookX;
            y = _hookY;
            speed = 0;
            _vSpd = 0;
            _hSpd = 0;
            if (_hookSide != "d")
                _state = PlayerState.stuck;
            else
            {
                with (obj_hook) instance_destroy();
                _state = PlayerState.idle;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Platform Physics

var lkey = (keyboard_check(vk_left) || keyboard_check(ord('A'))) &amp;&amp; (_canBeControlled);
var rkey = (keyboard_check(vk_right) || keyboard_check(ord('D'))) &amp;&amp; (_canBeControlled);
var dkey = (keyboard_check_pressed(vk_down) || keyboard_check(ord('S'))) &amp;&amp; (_canBeControlled);
var jkey = (keyboard_check_pressed(vk_up) || keyboard_check_pressed(ord('W'))) || keyboard_check_pressed(ord("Z")) &amp;&amp; (_canBeControlled);
var jkey_held = (keyboard_check(vk_up) || keyboard_check(ord('W'))) || keyboard_check(ord("Z")) &amp;&amp; (_canBeControlled);
var charge = (keyboard_check(vk_space) || mouse_check_button(mb_right)) &amp;&amp; _canBeControlled;

//if (dead==0)
{
    //If not pressing S
    if (_state == PlayerState.fixing) &amp;&amp; (!charge)
    {
        _state = PlayerState.idle;
    }

    // Check for ground
    if ((_state != PlayerState.hooking) &amp;&amp; (_state != PlayerState.stuck))
    {   
        if (place_meeting(x,y+1,obj_solid)) 
        {
            _vSpd = 0;
    
            if (jkey)
            {
                _vSpd = -_jSpd;
                audio_play_sound(snd_jump, 10, 0);
                
                /*if (_state == PlayerState.stuck)
                {
                    _state = PlayerState.jumping;
                     with (obj_hook) instance_destroy();}*/
            
                //if (obj_camera.world==1)
                    //audio_play_sound(snd_jump,10,0);
            }
        } 
        else 
        {
            // Gravity
            if (_vSpd &lt; 10)
            {
                _vSpd += _grav;
            }
        
            if (_vSpd&lt;0) &amp;&amp; (!jkey_held)
            {
                _vSpd = max(_vSpd,_vSpd + 2);
            }
        }
    }
    
    if (_state == PlayerState.stuck)
    {
        if (jkey)
        {
            _vSpd = -_jSpd;
            audio_play_sound(snd_jump, 10, 0);
            with (obj_hook) instance_destroy();
            _state = PlayerState.jumping;
        }
    }

    // Moving right
    if (rkey)
    {
        if ((_state != PlayerState.hooking) &amp;&amp; (_state != PlayerState.stuck))
        {
            if (_hSpd&lt;_spd)
                _hSpd += 1;
            else
                _hSpd=_spd;
        }
           
        if place_meeting(x,y+1,obj_solid)
            _state = PlayerState.running;
            
        /*if (_state == PlayerState.stuck)
        {    _state = PlayerState.falling;
            with (obj_hook) instance_destroy();}*/
    }

    // Moving left
    if (lkey)
    {
        if ((_state != PlayerState.hooking) &amp;&amp; (_state != PlayerState.stuck))
        {
             if (_hSpd&gt;-_spd)
               _hSpd -= 1;
            else
                _hSpd = -_spd;
        }
        
        if place_meeting(x,y+1,obj_solid)
            _state = PlayerState.running;
            
        /*if (_state == PlayerState.stuck)
{            _state = PlayerState.falling;
             with (obj_hook) instance_destroy();}*/
    }

    // Check for not moving
    if ((!rkey &amp;&amp; !lkey) || (rkey &amp;&amp; lkey))
    {
        if (_hSpd &gt; 0)
            _hSpd -= 1;
        else if (_hSpd &lt; 0)
            _hSpd += 1;
        else _hSpd = 0;
        
        if place_meeting(x,y+1,obj_solid) &amp;&amp; (_state != PlayerState.fixing)
            _state = PlayerState.idle;
    }
    
    //Fall from stuck
    if ((dkey) &amp;&amp; (_state == PlayerState.stuck))
    {
        _state = PlayerState.falling;
        with (obj_hook) instance_destroy();
    }

    // Horizontal collisions
    if (place_meeting(x + _hSpd,y,obj_solid)) 
    {
        while (!place_meeting(x + sign(_hSpd),y,obj_solid)) 
        {
            x += sign(_hSpd);
        }
        _hSpd=0;
    }
    

    // Move horizontally
    //if (move==0)
    //    _hSpd=0;
    
    if (_state != PlayerState.hooking) &amp;&amp; (_state != PlayerState.stuck) 
        x += _hSpd;
    
    //Face correct side
    if (_hSpd != 0)
        image_xscale = -sign(_hSpd);

    // Vertical collisions
    if (place_meeting(x,y + _vSpd,obj_solid)) 
    {
        while (!place_meeting(x,y + sign(_vSpd),obj_solid)) 
        {
            y += sign(_vSpd);
        }
        _vSpd = 0;
    }

    // Move vertically
    //if (dead==1)
        //_vSpd=0;
        
    if (_vSpd &gt; 0)
        _state = PlayerState.falling;
    else if (_vSpd &lt; 0)
        _state = PlayerState.jumping;
        
    if (_state != PlayerState.hooking)
        y += _vSpd;

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprites

if (_state == PlayerState.stuck)
{
    if (_hookSide == "r")
    {
        sprite_index = spr_main_wallHang;
        image_xscale = 1;
    }
    if (_hookSide == "l")
    {
        sprite_index = spr_main_wallHang;
        image_xscale = -1;
    }
    if (_hookSide == "u")
    {
        sprite_index = spr_main_hanging;
    }
}
else if (_state == PlayerState.idle)
{
    sprite_index = spr_main_idle;
    image_speed = .25;
}
else if (_state == PlayerState.running)
{
    sprite_index = spr_main_run;
    image_speed = .25;
}
else if (_state == PlayerState.jumping)
{
    if (sprite_index != spr_main_jumping)
    {
        sprite_index = spr_main_jumping;
        image_speed = .33;
        image_index = 0;
    }
}
else if (_state == PlayerState.falling)
{
    if (sprite_index != spr_main_falling)
    {
        sprite_index = spr_main_falling;
        image_speed = .33;
        image_index = 0;
    }
}
else if (_state == PlayerState.hooking)
{
    sprite_index = spr_main_hooking;
    image_speed = .4;
}
else if (_state == PlayerState.fixing)
{
    sprite_index = spr_main_fixing;
    image_speed = .25;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (_state == PlayerState.jumping) || (_state == PlayerState.falling)
{
    image_speed = 0;
    image_index = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

for(i=0; i &lt; instance_number(obj_enemy1);i++)
{
    obj = instance_find(obj_enemy1,i);
    dir = point_direction(x,y - 16,obj.x,obj.y);
    draw_sprite_ext(spr_arrow,0,x + lengthdir_x(32, dir),y - 16 +lengthdir_y(32,dir),1,1,dir,c_white,1);
}

for(i=0; i &lt; instance_number(obj_enemy2);i++)
{
    obj = instance_find(obj_enemy2,i);
    dir = point_direction(x,y - 16,obj.x,obj.y);
    draw_sprite_ext(spr_arrow,0,x + lengthdir_x(32, dir),y - 16 +lengthdir_y(32,dir),1,1,dir,c_white,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
